What is git?
Ans: Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.
and that can be downloaded from official website https://git-scm.com/

Notes:
1. Git command prompt works based on UNIX commands.
2. The .gitignore file:- Sometimes it may be a good idea to exclude files from being tracked with Git. This is typically done in a special file named.gitignore . 
You can find helpful templates for .gitignore files at github.com/github/gitignore.
$ touch .gitignore(don't create it from using UI, system get confused)
3. HEAD: representing your current working directory, the HEAD pointer can be moved to different branches, tags, or commits
when using git checkout, 
HEAD that always refers to the most recent commit in the current branch.
HEAD~1 being the second newest commit in the local repo,
4. The very first time you try to clone a private remote repository, you will be asked to provide username and password (unless already using SSH Key to connect to GitHub). 
5. After you provide authentication once, Git caches your credentials in memory and hands them out on demand. If the git config credential.helper command return manager, the password is stored in the windows credential manager, if it returns store, password is stored in a .git-credentials file in the user folder and if it returns oskeychain it’s stored in keychain.
6. Switch from the local branch (master) to the remote branch (origin/master) and enter a so called ‘detached HEAD state’. This allows you to explore what has been committed to remote repo by your colleagues.
7. git [command] --help #Full summary or git [command] -h #gives short summary
8. Once we commit the changes to local repo, Files will always be there in stagging area.

Commands:

1. Create repositories
   When starting out with a new repository, you only need to do it once. either create a repo in local system, then push it to GitHub(First we need to create a github repo then connect to remote repo have read/write access to your system, then push it), or by cloning an
   existing repository.

   $ git init(creates a .git folder in it )
   Turn an existing directory into a git repository

   $ git clone [url]
   Clone (download) a repository that already exists on GitHub, including all of the files, branches, and commits
   EX: git clone https://your_username:your_pw@github.com/anbento0490/repo_name.git
   
   $ git clone [url] FolderName
   Clone (download) a repository that already exists on GitHub within the specified folder name, including all of the files, branches, and commits
   
   

2. Configure tooling(Can be done in three level 1. global(All repository of current user), 2. local(Current repository), 3. system(All User))
   Note:
      1. .gitconfig file get created in ~/.gitconfig path. Here we have all the configuration setting stored in this file.
      
   $ git config --global color.ui auto
   Enables helpful colorization of command line output

   $ git config --global user.email "[email address]".     #Use double quote if we have space between the values, otherwise we can paas without double quote.
   Sets the email you want attached to your commit transactions

   $ git config --global user.name "[name]"
   Sets the name you want attached to your commit transactions

   $git config -l
   Give the list of configuration settings
   
3.connect your remote repo to local repo 

   $ git remote add origin "https link from clone the repo in github"(Add the repo/remote with name origin or this will link your remote repo to terminal means whatever the operation performed through git bash are shown in that particular remote repo and local repo )
   Note:
   Here we have added the origin but still we can don't have read/write access, So we can add a SSH key which will ever authenticate our system for any read/write.
   
   $ git remote(List of remote reportsitory)
 
   $ git remote -v (give fetch and push url for list of remote)
   
   $ git remote set-url [RemoteName] [url](If we want to change the URL or our remote)
   
   $git remote remove origin
   Remove the remote with the name origin
 
2. Genrate a SSH key and add it to github(If it's a private repository): 
   It will authenticate the system who can do the chnages,Take the ssh url from repo cloning


4. Pull the files from the specified bracnh_name

   $ git pull origin [branch_name]

   Note:
   1. Difference between git pull and git fetch (git pull= gitfetch +git merge here git fetch will create a new branch in local repo)


5. There is a stagging layer in between our workspace or local repo so we need to first add files to stagged/index layer then we will  commit to local repo

   $ git status(used to see what are the files added to stagged/index layer or what are not, Untracked files will be in red colour and Tracked files will be in green colour)
   $ git status -s (Provide short summary, Same as git status, Here first col represent stagging area and second col rep working area)
   
   $ git add file.txt #Add files to stagged/index layer 
   $ git add file1.txt file2.txt #Add multiple files to stagging area
   $ git add *.txt #Add files based on pattern matching
   $ git add . #Add all the files in stagging area
   
   
   
6. Commit to local repo

   $ git commit -m "commment"(commit to local repo -m flag is used to give message) RECOMMENDED
   $ git commit(opens the VIM editor where we can paas our message)
   $ git commit -am "commment" or $ git commit -a -m "commment"(Commit the changes from local direcoty to local repo direcltly without adding to stagging area)NOT RECOMMENDED
   Note:
   If the file was not tracked before(Newly created file) then we have to first add to stagging area then we can commit, git commit -a -m "commment"(This command will not work for newly created file)
   

16.create a stash 
    $ git stash save "comment"(it will create a stash its like a savepoint in oracle sql that can be apllied to branch and note the stash id )
and 
    $ git stash apply stashId(it will aplly the stash to particukar branch from which we are applying it )

17. $ git stash list(give list of all stash avilable)
    $ git stash shoe(more about stash)

15. $ git diff(diff between the working directory and the stagged directory)
    Note:
    If we added a file in stagged/index layer, then we have updated the file and we want to commit the changes then we don't have to again add file to stagged/index layer it will automatically add if we commit the files from stagged/index layer. 
   
    $ git diff --stagged(diff between the stagged directory and commited directory)
    
    $git diff HEAD~1 HEAD
    Diff between the last commmited and it's previous commit
    

7. $ git log
   Lists version history for the current branch or we can also use -before='date' or -- author='name' or --oneline or --reverse
   Each commit is assigned with a 40 char long unique ID or hash.

   $ git log --follow [file]
   Lists version history for a file, including renames
   
   $ git log -p NumberOfLatestLogs(Gives the same details as git diff command)
   Lists version history for the current branch for NumberOfLatestLogs
   
   $ git show [8 digit hash code from commit]
   Outputs metadata and content changes done in specified commit
   
   $ git show [8 digit hash code from commit]:[filepath]
   Outputs the content of file in the specified commit
   
   $ git ls-tree [8 digit hash code from commit]# To Check the list of files available in that particular commit
   
   
8. Command use in replacement of standard UNIX command.
   Note:
   If a earlier commited file is deleted from the working directory, then we have to use "git add file.txt", To stage the changes in stagging area# Here file.txt is the file deleted from the working directory.
   
   $ git ls-files # To Check the list of files available in stagging area

   
   $ git rm --cached [file_name](Remove the file from stagged/index area)

   $ git rm [file_name](remove the file from working direcory as well as stagging area)# Here if we will use UNIX rm command then we have to stage the changes in staggiong layer, git rm command will directly remove the file from working directory as well as stagging area
   
   $ git mv [file1] [file2] #command use to rename or move the file

8. create a branch
   $ git branch(Prompt all branches names )

   $ git branch [branchName](If we have created branch using this command from master branch then we have to swicth to branch we have created)
   
   $git branch -r
   To check the list of branch available in remote repo
   
   $git branch -a
   To check the list of branch available in local repo
   

   $ git chcekout -b [branchname] (create the branch and switch to it ) 

   $ git checkout [branchName](switch to particukar branch)

   $ git checkout [FileName](If we have done some changes in A.txt and we want to rollback to the last commited data in file A.txt)
   
   $ git checkout -f (Rollback to the last commited data in all the files)


9. $ git merge branchName(from master branch in prompt we give that command it will merge into master branch)

10.$ git rebase branchname(we have done the chnages in branch and we want that changes happen in its sub  branch automatically ,so we use this command and here BranchName branch will be in head node of a tree and from which branch we are prompt is sub of it)

11. Delete the branch 
    $ git branch -d branchName (delete the branch)
    
12.    $ git diff [first-branch]...[second-branch]
    Shows content differences between two branches


12.if we want to push the chnages in localrepo to github repo 
   $ git push origin [branchName] (if branch doesn't exist in remote repo it will create the branch in remote repo or git push -u origin master ask for username and password)
   
   $ git push -u origin [branchName] (It will push the code in branchName and next time we can just use git push and it will automatically push in branchname, we don't have to define everytime)
   
13.we can rollback to previous version first we have to give

  $ git log (from here we have to copy the first 8bit of hashcode of various chnages)then
  $ git revert hashcode (or we can return to before last commit using $ git commit HEAD) 
  $ git reset -hard HEAD(Need to check)
  
  
  $ git restore --stagged [file1.txt, file2.txt, *.txt] #restore the file from last commited snapshot to stagging area
  
  $ git restore [file1.txt, file2.txt, *.txt] #restore the file from stagging area


23.merge conflict(how to solve it )
  1.centralized merge(there a repo 2 person have pulll that repo and 1 chnaged it and push but the other person don't know about that so that create a conflict when the second user push own code so to resolve it use )
  $ git pull --rebase origin master
  or then we can saw the conflict using git status 
  then 
  $ git mergetool  
  $ git rebase --continue
  
